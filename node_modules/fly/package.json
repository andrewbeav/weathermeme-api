{
  "_args": [
    [
      {
        "raw": "fly",
        "scope": null,
        "escapedName": "fly",
        "name": "fly",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/run/media/andrewbeav/My Files/home/Documents/code/projects/weathermeme-api"
    ]
  ],
  "_from": "fly@latest",
  "_id": "fly@2.0.6",
  "_inCache": true,
  "_location": "/fly",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/fly-2.0.6.tgz_1493841835294_0.25418568425811827"
  },
  "_npmUser": {
    "name": "lukeed",
    "email": "luke@lukeed.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "fly",
    "scope": null,
    "escapedName": "fly",
    "name": "fly",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/fly/-/fly-2.0.6.tgz",
  "_shasum": "77aa3c94e8e30ed235e06e91973f135dd55e03bd",
  "_shrinkwrap": null,
  "_spec": "fly",
  "_where": "/run/media/andrewbeav/My Files/home/Documents/code/projects/weathermeme-api",
  "author": {
    "name": "Jorge Bucaran",
    "email": "jbucaran@gmail.com",
    "url": "https://github.com/jbucaran"
  },
  "bin": {
    "fly": "cli.js"
  },
  "bugs": {
    "url": "https://github.com/flyjs/fly/issues"
  },
  "contributors": [
    {
      "name": "Luke Edwards",
      "email": "luke@lukeed.com",
      "url": "https://lukeed.com"
    }
  ],
  "dependencies": {
    "bluebird": "^3.5.0",
    "clor": "^5.0.1",
    "glob": "^7.1.1",
    "minimist": "^1.2.0",
    "mkdirp": "^0.5.1"
  },
  "deprecated": "Hello there! Fly has been renamed to Taskr, so please install `taskr` instead =) Currently the two packages are (nearly) identical; however, `fly` will no longer receive updates. There is a very quick migration guide available here: https://github.com/lukeed/taskr#history",
  "description": "Generator & Coroutine-based build system. Fasten your seatbelt.",
  "devDependencies": {
    "rimraf": "^2.5.4",
    "tap-spec": "^4.1.1",
    "tape": "^4.6.3"
  },
  "directories": {},
  "dist": {
    "shasum": "77aa3c94e8e30ed235e06e91973f135dd55e03bd",
    "tarball": "https://registry.npmjs.org/fly/-/fly-2.0.6.tgz"
  },
  "engines": {
    "node": ">= 4.6"
  },
  "files": [
    "lib",
    "cli.js"
  ],
  "gitHead": "b3a8d281d8526e5f02bed4fe354bc197abb4217e",
  "homepage": "https://github.com/flyjs/fly",
  "keywords": [
    "cli",
    "task",
    "build",
    "async",
    "await",
    "minify",
    "uglify",
    "promise",
    "pipeline",
    "generator",
    "coroutine",
    "automation",
    "task runner",
    "build system"
  ],
  "license": "MIT",
  "main": "lib/fly.js",
  "maintainers": [
    {
      "name": "jbucaran",
      "email": "jbucaran@gmail.com"
    },
    {
      "name": "lukeed",
      "email": "luke@lukeed.com"
    }
  ],
  "name": "fly",
  "optionalDependencies": {},
  "readme": "<div align=\"center\">\n    <img src=\"https://avatars1.githubusercontent.com/u/20690665?v=3&s=200\" alt=\"fly logo\" width=\"80\">\n</div>\n\n<h1 align=\"center\">fly</h1>\n\n<div align=\"center\">\n    <!-- NPM version -->\n    <a href=\"https://npmjs.org/package/fly\">\n        <img src=\"https://img.shields.io/npm/v/fly.svg\" alt=\"NPM version\"/>\n    </a>\n    <!-- Build Status -->\n    <a href=\"https://travis-ci.org/flyjs/fly\">\n        <img src=\"https://img.shields.io/travis/flyjs/fly.svg\" alt=\"Build Status\"/>\n    </a>\n    <!-- Test Coverage -->\n    <!-- <a href=\"https://codecov.io/github/flyjs/fly\"> -->\n        <!-- <img src=\"https://img.shields.io/codecov/c/github/flyjs/fly/master.svg\" alt=\"Test Coverage\"/> -->\n    <!-- </a> -->\n    <!-- AppVeyor -->\n    <a href=\"https://ci.appveyor.com/project/lukeed/fly/branch/master\">\n        <img src=\"https://ci.appveyor.com/api/projects/status/jjw7gor0edirylu5/branch/master?svg=true\" alt=\"Windows Status\"/>\n    </a>\n    <!-- Downloads -->\n    <a href=\"https://npmjs.org/package/fly\">\n        <img src=\"https://img.shields.io/npm/dm/fly.svg\" alt=\"Downloads\"/>\n    </a>\n</div>\n\n<div align=\"center\">\n    A generator & coroutine-based task runner.\n</div>\n\n<div align=\"center\">\n    <strong>Fasten your seatbelt. :rocket:</strong>\n</div>\n\n<br />\n\nFly is a highly performant task automation tool, much like Gulp or Grunt, but written with concurrency in mind. With Fly, everything is a [coroutine](https://medium.com/@tjholowaychuk/callbacks-vs-coroutines-174f1fe66127#.vpryf5tyb), which allows for cascading and composable tasks; but unlike Gulp, it's not limited to the stream metaphor.\n\nFly is extremely extensible, so _anything_ can be a task. Our core system will accept whatever you throw at it, resulting in a modular system of reusable plugins and tasks, connected by a declarative `flyfile.js` that's easy to read.\n\n<h2>Table of Contents</h2>\n<details>\n<summary>Table of Contents</summary>\n\n- [Features](#features)\n- [Example](#example)\n- [Concepts](#concepts)\n    * [Core](#core)\n    * [Plugins](#plugins)\n    * [Tasks](#tasks)\n    * [Flyfiles](#flyfiles)\n- [CLI](#cli)\n- [API](#api)\n    * [Fly](#fly-1)\n    * [Plugin](#plugin)\n    * [Task](#task-1)\n    * [Utilities](#utilities)\n- [Installation](#installation)\n- [Usage](#usage)\n    * [Getting Started](#getting-started)\n    * [Programmatic](#programmatic)\n- [Ecosystem](#ecosystem)\n</details>\n\n## Features\n- **lightweight:** with `5` dependencies, [installation](#installation) takes seconds\n- **minimal API:** Fly only exposes a couple methods, but they're everything you'll ever need\n- **performant:** because of [Bluebird](https://github.com/petkaantonov/bluebird/), creating and running Tasks are quick and inexpensive\n- **cascading:** sequential Task chains can cascade their return values, becoming the next Task's argument\n- **asynchronous:** concurrent Task chains run without side effects & can be `yield`ed consistently\n- **composable:** chain APIs and Tasks directly; say goodbye to `pipe()` x 100!\n- **modular:** easily share or export individual Tasks or Plugins for later use\n- **stable:** requires Node `6.x` to run (LTS is `6.9`)\n\n## Example\n\nHere's a simple [`flyfile`](#flyfiles) (with [shorthand generator methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions#Shorthand_generator_methods)) depicting a [parallel](#flyparalleltasks-options) chain.\n\n```js\nconst sass = \"src/{admin,client}/*.sass\"\nconst js = \"src/{admin,client}/*.js\"\nconst dist = \"build\"\n\nmodule.exports = {\n  *lint(fly) {\n    yield fly.source(js).xo({ esnext: true })\n  },\n  *scripts(fly) {\n    yield fly.source(js).babel({ presets: [\"es2015\"] }).target(`${dist}/js`)\n  },\n  *styles(fly) {\n    yield fly.source(sass).sass({ outputStyle: \"compressed\" }).autoprefixer().target(`${dist}/css`)\n  },\n  *build(fly) {\n    yield fly.parallel([\"lint\", \"scripts\", \"styles\"])\n  }\n}\n```\n\n## Concepts\n\n### Core\n\nFly is a task runner. It's designed to get you from `A` to `B` -- that's it.\n\nIf it helps, imagine you're dining in a restaurant and Fly is the food runner. Fly's role is solely to collect meals from the kitchen (`fly.source`) and deliver them to the correct table (`fly.target`). As a food runner, Fly may do this one plate at a time (`fly.serial`) or deliver multiple plates at once (`fly.parallel`). Either way, Fly only cares about going from `A` to `B`. It may not be the most glamorous job, but as far as you (the patron) are concerned, it's incredibly important because it brings you food.\n\n### Plugins\n\nBecause Fly is single-minded and cares only about executing [tasks](#tasks), **everything else is a plugin**. This keeps development with Fly easy, approachable, and lightweight.\n\nYou see, installing Fly gives access to a reliable task runner. You decide what it _can do_, provide it functionality, and dictate when to do it. You're in full control.\n\nThrough plugins, you are able to capture useful behavior and share them across tasks or projects for repeated use. Plugins come in three flavors:\n\n* **external** - installed via NPM; called \"external\" because they live outside your codebase\n* **inline** - generally simple, one-time functions; not sensible for reuse since declared within a task (hence \"inline\")\n* **local** - private, reusable plugins; appear exactly like external plugins but not public on NPM.\n\n### Tasks\n\nTasks are used to tell Fly what to do. They are written as generator functions & converted to coroutines internally. They're also fully self-contained and, like plugins, can be shared across projects if desired.\n\nUpon runtime, tasks are cheap to create, so are also destroyed once completed. This also helps Fly remain efficient; history won't weigh it down.\n\nLastly, tasks have the power to [start](#taskstarttask-options) other Tasks, including [serial](#taskserialtasks-options) and [parallel](#taskparalleltasks-options) chains!\n\n### Flyfiles\n\nMuch like Gulp, Fly uses a `flyfile.js` (case sensitive) to read and run your Tasks. However, because it's a regular JavaScript file, you may also `require()` additional modules and incorporate them directly into your Tasks, without the need for a custom Plugin!\n\n```js\nconst browserSync = require(\"browser-sync\")\n\nexports.serve = function * (fly) {\n  browserSync({\n    port: 3000,\n    server: \"dist\",\n    middleware: [\n      require(\"connect-history-api-fallback\")()\n    ]\n  })\n  yield fly.$.log(\"> Listening on localhost:3000\")\n}\n```\n\nFlyfiles should generally be placed in the root of your project, alongside your `package.json`. Although this is not required, Fly (strongly) prefers this location.\n\n> **Note:** You may set an alternate directory path through the CLI's `cwd` option.\n\nThrough Node, Fly only supports ES5 syntax; however, if you prefer ES6 or ES7, just install [`fly-esnext`](https://github.com/lukeed/fly-esnext)!\n\n## CLI\n\nFly's CLI tool is very simple and straightforward.\n\n```\nfly [options] <tasks>\nfly --mode=parallel task1 task2 ...\n```\n> Please run `fly --help` or `fly -h` for usage information.\n\nMost commonly, the CLI is used for [NPM script](https://docs.npmjs.com/misc/scripts) definitions.\n\n```js\n// package.json\n{\n  \"scripts\": {\n    \"build\": \"fly task1 task2\"\n  }\n}\n```\n\n## API\n\n### Fly\n\nFly itself acts as a \"parent\" class to its `Task` children. Because of this, Fly's methods are purely executive; aka, they manage Tasks and tell them how & when to run.\n\n#### fly.start(task, [options])\nYield: `Any`<br>\nStart a Task by its name; may also pass initial values. Can return anything the Task is designed to.\n\n##### task\nType: `String`<br>\nDefault: `'default'`<br>\nThe Task's name to run. Task must exist/be defined or an Error is thrown.<br>\n> **Important!** Fly expects a `default` task if no task is specified. This also applies to CLI usage.\n\n##### options\nType: `Object`<br>\nDefault: `{src: null, val: null}`<br>\nInitial/Custom values to start with. You may customize the object shape, but only `val` will be cascaded from Task to Task.\n\n#### fly.parallel(tasks, [options])\nYield: `Any`<br>\nRun a group of tasks simultaneously. Cascading is disabled.\n##### tasks\nType: `Array`<br>\nThe names of Tasks to run. Task names must be `string`s and must be defined.\n##### options\nType: `Object`<br>\nInitial values to start with; passed to each task in the group. Does not cascade.\n\n#### fly.serial(tasks, [options])\nYield: `Any`<br>\nRun a group of tasks sequentially. Cascading is enabled.\n##### tasks\nType: `Array`<br>\nThe names of Tasks to run. Task names must be `string`s and must be defined.\n##### options\nType: `Object`<br>\nInitial values to start with; passed to each task in the group. Does cascade.\n\n```js\nmodule.exports = {\n  *default(fly) {\n    yield fly.serial([\"first\", \"second\"], {val: 10})\n  },\n  *first(fly, opts) {\n    yield fly.$.log(`first: ${opts.val}`)\n    return opts.val * 4\n  },\n  *second(fly, opts) {\n    yield fly.$.log(`second: ${opts.val}`)\n    return opts.val + 2\n  }\n}\n\nconst output = yield fly.start()\n//=> first: 10\n//=> second: 40\nconsole.log(output)\n//=> 42\n```\n\n### Plugin\n\nPlugins can be external, internal, or local. However, all plugins share the same options:\n\n##### options.every\nType: `Boolean`<br>\nDefault: `true`<br>\nIf the plugin function should iterate through _every_ `file|glob`.\n\n##### options.files\nType: `Boolean`<br>\nDefault: `true`<br>\nIf the plugin should receive the Task's `glob` patterns or its expanded `file` objects. Uses `globs` if `false`.\n\nEvery plugin must also pass a **generator function**, which will be wrapped into a coroutine. This function's arguments will be the `file|glob`(s), depending on the `options.every` and `options.files` combination. The function's second argument is the user-provided config object.\n\nThe plugin's generator function is **always** bound to the current `Task`, which means `this` refers to the Task instance.\n\n#### Internal Plugins\n\nInternal plugins are for single-use only. If you're defining the same behavior repeatedly, it should be extracted to a local or external plugin instead.\n\n> **Note:** Inline plugins have no need for a second argument in their generator function; you are the \"user\" here.\n\nSee [`task.run`](#taskrunoptions-generator) for a simple example. The same inline example may be written purely as an object:\n\n```js\nexports.foo = function * (fly) {\n  yield fly.source(\"src/*.js\").run({\n    every: false,\n    *func(files) {\n      Array.isArray(files) //=> true\n      yield Promise.resolve(\"this will run once.\")\n    }\n  }).target(\"dist\")\n}\n```\n\n#### External Plugins\n\nUnlike \"inline\" plugins, external and local plugins are defined before a Task is performed. Because of this, they must define a `name` for their method to use within a Task.\n\nSimilar to inline plugins, there are two ways of defining an exported module -- via functional or object definitions.\n\nWhen using a _functional definition_, the **definition** receives the [Fly](#fly-1) instance and the [utilities](#utilities) object.\n\n```js\nmodule.exports = function (fly, utils) {\n  // promisify before running else repeats per execution\n  const render = utils.promisify(function () {})\n  // verbose API\n  fly.plugin(\"myName\", {every: false}, function * (files, opts) {\n    console.log(\"all my files: \", files) //=> Array\n    console.log(this._.files === files) //=> true\n    console.log(this instanceof Task) //=> true\n    console.log(\"user options: \", opts)\n    yield render(opts)\n  })\n  // or w/condensed API\n  fly.plugin({\n    name: \"myName\",\n    every: false,\n    *func(files, opts) {\n      // ...same\n    }\n  })\n}\n```\n\nWhen using an _object definition_, you are not provided the `fly` or `utils` objects. **This assumes that you do not need any prep work for your plugin!**\n\n```js\nmodule.exports = {\n  name: \"myName\",\n  every: false,\n  *func(files, opts) {\n    // do stuff\n  }\n}\n```\n\nThen, within your Task, you may use it like so:\n\n```js\nexports.default = function * (fly) {\n  yield fly.source(\"src/*.js\").myName({ foo: \"bar\" }).target(\"dist\")\n}\n```\n\n#### Local Plugins\n\nLocal plugins are defined exactly like external plugins. The only difference is that they're not installable via NPM.\n\nIn order to use a local plugin, add a `fly` key to your `package.json` file. Then define a `requires` array with paths to your plugins.\n\n```js\n{\n  \"fly\": {\n    \"requires\": [\n      \"./build/custom-plugin-one.js\",\n      \"./build/custom-plugin-two.js\"\n    ]\n  }\n}\n```\n\nFor [programmatic usage](#programmatic), simply pass an array of definitions to the `plugins` key:\n\n```js\nconst Fly = require('fly')\nconst fly = new Fly({\n  plugins: [\n    require(\"./build/custom-plugin-one.js\"),\n    require(\"./build/custom-plugin-two.js\"),\n    require(\"fly-clear\")\n    {\n      name: \"plugThree\",\n      every: false,\n      files: false,\n      *func(globs, opts) {\n        // nifty, eh?\n      }\n    }\n  ]\n})\n```\n\n### Task\n\nA Task receives itself as its first argument. We choose to name the parameter `fly` simply as a convention; of course, you may call it whatever you'd like.\n\nTasks are exported from a `flyfile.js`, which means you can use either syntax:\n\n```js\nexports.foo = function * (fly) {\n  yield fly.source(\"src/*.js\").target(\"dist/js\")\n}\nexports.bar = function * (fly) {\n  yield fly.source(\"src/*.css\").target(\"dist/css\")\n}\n// or\nmodule.exports = {\n  *foo(fly) {\n    yield fly.source(\"src/*.js\").target(\"dist/js\")\n  },\n  *bar(fly) {\n    yield fly.source(\"src/*.css\").target(\"dist/css\")\n  }\n}\n```\n\nEach Task also receives an `opts` object, consisting of `src` and `val` keys. Although `src` is primarily used for [`fly-watch`](https://github.com/flyjs/fly-watch), the `val` key can be used or set at any time see [`fly.serial`](#flyserialtasks-options).\n\nAll methods and values below are exposed within a Task's function.\n\n#### task.root\nType: `String`<br>\nThe directory wherein `flyfile.js` resides, now considered the root. Also accessible within plugins.\n\n#### task.$\nType: `Object`<br>\nThe Task's utility helpers. Also accessible within plugins. See [Utilities](#utilities).\n\n#### task._\nType: `Object`<br>\nThe Task's internal state, populated by `task.source()`. Also accessible within plugins.\n##### task._.files\nType: `Array`<br>\nThe Task's active files. Each object contains a `dir` and `base` key from its [`pathObject`](https://nodejs.org/api/path.html#path_path_format_pathobject) and maintains the file's Buffer contents as a `data` key.\n##### task._.globs\nType: `Array`<br>\nThe Task's glob patterns, from `task.source()`. Used to populate `task._.files`.\n##### task._.prevs\nType: `Array`<br>\nThe Task's last-known (aka, outdated) set of glob patterns. USed **only** for [`fly-watch`](https://github.com/flyjs/fly-watch).\n\n#### task.source(globs, [options])\n##### globs\nType: `Array|String`<br>\nAny valid glob pattern or array of patterns.\n##### options\nType: `Object`<br>\nDefault: `{}`<br>\nAdditional options, passed directly to [`node-glob`](https://github.com/isaacs/node-glob#options).\n\n#### task.target(dirs, [options])\n##### dirs\nType: `Array|String`<br>\nThe destination folder(s).\n##### options\nType: `Object`<br>\nDefault: `{}`<br>\nAdditional options, passed directly to [`fs.writeFile`](https://nodejs.org/api/fs.html#fs_fs_writefile_file_data_options_callback).\n\n<!-- Please note that the first instance of ambiguity within `task.source()` defines the destination's structure. -->\nPlease note that `task.source()` glob ambiguity affects the destination structure.\n\n```js\nyield fly.source(\"src/*.js\").target(\"dist\")\n//=> dist/foo.js, dist/bar.js\nyield fly.source(\"src/**/*.js\").target(\"dist\")\n//=> dist/foo.js, dist/bar.js, dist/sub/baz.js, dist/sub/deep/bat.js\n```\n\n#### task.run(options, generator)\nPerform an inline plugin.\n\n##### options\nType: `Object`<br>\nThe See [plugin options](#plugin).\n##### generator\nType: `Function`<br>\nThe action to perform; must be a `Generator` function.\n\n```js\nexports.foo = function * (fly) {\n  yield fly.source(\"src/*.js\").run({every: false}, function * (files) {\n    Array.isArray(files) //=> true\n    yield Promise.resolve(\"this will run once.\")\n  }).target(\"dist\")\n}\n```\n\n#### task.start(task, [options])\nSee [`fly.start`](#flystarttask-options).\n\n#### task.parallel(tasks, [options])\nSee [`fly.parallel`](#flyparalleltasks-options).\n\n#### task.serial(tasks, [options])\nSee [`fly.serial`](#flyserialtasks-options).\n\n### Utilities\n\nA collection of utility helpers to make life easy.\n\n#### alert()\nPrint to console with timestamp and alert coloring.\n\n#### coroutine(generator)\nSee [Bluebird.coroutine](http://bluebirdjs.com/docs/api/promise.coroutine.html).\n\n#### error()\nPrint to console with timestamp and error coloring.\n\n#### expand(globs, options)\nYield: `Array`<br>\nGet all filepaths that match the glob pattern constraints.\n##### globs\nType: `Array|String`\n##### options\nType: `Object`<br>\nDefault: `{}`<br>\nAdditional options, passed directly to [`node-glob`](https://github.com/isaacs/node-glob#options).\n\n#### find(filename, dir)\nYield: `String|null`<br>\nFind a complete filepath from a given path, or optional directory.\n##### filename\nType: `String`<br>\nThe file to file; may also be a complete filepath.\n##### dir\nType: `String`<br>\nDefault: `'.'`<br>\nThe directory to look within. Will be prepended to the `filename` value.\n\n#### log()\nPrint to console with timestamp and normal coloring.\n\n#### promisify(function, callback)\nSee [Bluebird.promisify](http://bluebirdjs.com/docs/api/promise.promisify.html).\n\n#### read(filepath, options)\nYield: `Buffer|String|null`<br>\nGet a file's contents. Ignores directory paths.\n##### filepath\nType: `String`<br>\nThe full filepath to read.\n##### options\nType: `Object`<br>\nAdditional options, passed to [`fs.readFile`](https://nodejs.org/api/fs.html#fs_fs_readfile_file_options_callback).\n\n#### trace(stack)\nParse and prettify an Error's stack.\n\n#### write(filepath, data, options)\nYield: `null`<br>\nWrite given data to a filepath. Will create directories as needed.\n##### filepath\nType: `String`<br>\nThe full filepath to write into.\n##### data\nType: `String|Buffer`<br>\nThe data to be written; see [`fs.writeFile`](https://nodejs.org/api/fs.html#fs_fs_writefile_file_data_options_callback).\n##### options\nType: `Object`<br>\nAdditional options, passed to [`fs.writeFile`](https://nodejs.org/api/fs.html#fs_fs_writefile_file_data_options_callback).\n\n## Installation\n\n```sh\n$ npm install --save-dev fly\n```\n\n## Usage\n\n### Getting Started\n\n1. Install Fly & any desired plugins. (see [installation](#installation) and [ecosystem](#ecosystem))\n2. Create a `flyfile.js` next to your `package.json`.\n3. Define `default` and additional tasks within your `flyfile.js`.\n\n  ```js\n  export.default = function * (fly) {\n    yield fly.parallel([\"styles\", \"scripts\"])\n  }\n\n  export.styles = function * (fly) {\n    yield fly.source(\"src/**/*.css\").autoprefixer().target(\"dist/css\")\n  }\n\n  export.scripts = function * (fly) {\n    yield fly.source(\"src/**/*.js\").babel({\n      presets: [\n        [\"es2015\", {loose: true, modules: false}]\n      ]\n    })\n  }\n  ```\n4. Add a `\"scripts\"` key to your `package.json`:\n\n  ```json\n  {\n    \"name\": \"my-project\",\n    \"scripts\": {\n      \"build\": \"fly\"\n    }\n  }\n  ```\n\n  > **Note:** The `default` task is run if no other tasks are specified.\n5. Run your `build` command:\n\n  ```sh\n  $ npm run build\n  ```\n\nYou may be interested in checking out a [Web Starter Kit](https://github.com/lukeed/fly-kit-web) for a head start.\n\n### Programmatic\n\nFly is extremely flexible should you choose to use Fly outside of its standard configuration.\n\nThe quickest path to a valid `Fly` instance is to send a `tasks` object:\n\n```js\nconst Fly = require(\"Fly\")\nconst fly = new Fly({\n  tasks: {\n    *foo(f) {},\n    *bar(f) {}\n  }\n})\nfly.start(\"foo\")\n```\n\nBy default, your new Fly instance will not include any plugins. You have the power to pick and choose what your instance needs!\n\nTo do this, you may pass an array of [external](#external-plugins) and [local](#local-plugins) `plugins`:\n\n```js\nconst fly = new Fly({\n  plugins: [\n    require(\"fly-clear\"),\n    require(\"fly-concat\"),\n    require(\"./my-plugin\")\n  ]\n})\n```\n\n> **Important:** This assumes you have provided a valid `file` _or_ `tasks` object. Without either of these, your Fly instance will be incomplete and therefore invalid. This will cause the instance to exit early, which means that your `plugins` will not be mounted to the instance.\n\nYou may also define your `tasks` by supplying a `flyfile.js` path to `file`. Whenever you do this, you **should** also update the `cwd` key because your [root](#taskroot) has changed!\n\n```js\nconst join = require(\"path\").join\n\nconst cwd = join(__dirname, \"..\", \"build\")\nconst file = join(cwd, \"flyfile.js\")\n\nconst fly = new Fly({ file, cwd })\n```\n\n\n## Ecosystem\n\nBelow is a list of official plugins. You may also [browse all fly-related plugins](https://www.npmjs.com/browse/keyword/fly-plugin) on NPM.\n\nIf you'd like to create and share a plugin for Fly, we have a [Yeoman generator](https://github.com/flyjs/generator-fly) to speed up the process.\n\n- [fly-clear](https://github.com/flyjs/fly-clear) - Remove one or multiple directories\n- [fly-watch](https://github.com/flyjs/fly-watch) - Watch files & Execute specified tasks on change\n- [fly-babel](https://github.com/flyjs/fly-babel) - Babel plugin for Fly\n- [fly-uglify](https://github.com/flyjs/fly-uglify) - UglifyJS2 plugin for Fly\n- [fly-eslint](https://github.com/flyjs/fly-eslint) - ESLint plugin for Fly\n- [fly-coffee](https://github.com/flyjs/fly-coffee) - Compile CoffeeScript with Fly\n- [fly-typescript](https://github.com/flyjs/fly-typescript) - TypeScript plugin for Fly\n- [fly-concat](https://github.com/lukeed/fly-concat) - Concatenate files with optional source maps.\n- [fly-flatten](https://github.com/lukeed/fly-flatten) - Flatten all source files to a specified maximum of sub-directories.\n- [fly-esnext](https://github.com/lukeed/fly-esnext) - Allow for ES6 and ES7 support throughout a Fly environment.\n- [fly-shell](https://github.com/lukeed/fly-shell) - Execute shell commands with Fly\n- [fly-rev](https://github.com/lukeed/fly-rev) - Append a unique hash to filenames\n- [fly-zip](https://github.com/lukeed/fly-zip) - ZIP compress files with Fly\n- [fly-gzip](https://github.com/lukeed/fly-gzip) - Gzip plugin for Fly\n- [fly-precache](https://github.com/lukeed/fly-precache) - Generate a service worker to cache resources and make them available offline.\n- [fly-htmlmin](https://github.com/lukeed/fly-htmlmin) - Minify HTML with Fly\n- [fly-autoprefixer](https://github.com/lukeed/fly-autoprefixer) -\n- [fly-mocha](https://github.com/flyjs/fly-mocha) - Fly plugin for Mocha\n- [fly-xo](https://github.com/lukeed/fly-xo) - XO plugin for Fly\n- [fly-ava](https://github.com/flyjs/fly-ava) - Fly plugin for AVA\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/flyjs/fly.git"
  },
  "scripts": {
    "test": "tape test/*.js | tap-spec"
  },
  "version": "2.0.6"
}
